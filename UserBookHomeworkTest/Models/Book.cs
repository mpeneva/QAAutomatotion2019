// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using UserBookHomeworkTest;
//
//    var book = Book.FromJson(jsonString);
using UserBookHomeworkTest.Models;

namespace UserBookHomeworkTest
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Newtonsoft.Json;

    public partial class Book : UserBookHomeworkTestBaseClass
    {
        public static Hashtable userHouseHoldIdList = new Hashtable();

        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("publicationDate")]
        public DateTimeOffset PublicationDate { get; set; }

        [JsonProperty("isbn")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Isbn { get; set; }

        [JsonProperty("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        public static Book BookProducer(string userName, int index)
        {
            return new Book
            {
                Title = String.Concat(userName,index),
                Author = String.Concat("Book", index, "Author"),
                Isbn = 12345678 + index,
                CreatedAt = new DateTimeOffset(DateTime.Now)
            };
        }
        
        public static bool IsBookCollectionUnique(List<Book> bookList)
        {   
            Hashtable bookTable = new Hashtable();
            foreach(Book book in bookList)
            {
                int count = 0;
                if (bookList.Contains(book))
                {
                    count++;
                    bookTable.Add(book.Id, count);
                    
                }
            }
                return (bookTable.ContainsValue(2) ? false : true);

        }

        public static Book FromJson(string json) => JsonConvert.DeserializeObject<Book>(json, UserBookHomeworkTest.Helpers.Converter.Settings);
    }
    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
